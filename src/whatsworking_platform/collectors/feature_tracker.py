#!/usr/bin/env python3
"""
Reporters Module - Consolidated reporting functionality

This module consolidates all the reporting functionality from the scattered
whatsworking files into a unified system.
"""

import os
import json
import requests
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

console = Console()

class ReportGenerator:
    """Generate various types of reports"""
    
    def __init__(self, project_path: str = "./"):
        self.project_path = Path(project_path).resolve()
        self.reports_dir = self.project_path / "DEV_MAN" / "whatsworking"
        self.reports_dir.mkdir(parents=True, exist_ok=True)
    
    def generate_codebase_report(self) -> str:
        """Generate comprehensive codebase analysis report"""
        # This would integrate with your existing CodebaseAnalyzer
        # For now, return a placeholder
        return "# Codebase Analysis Report\n\nThis report would be generated by the integrated CodebaseAnalyzer."
    
    def generate_health_report(self) -> str:
        """Generate project health report"""
        # This would integrate with your Project Intelligence system
        return "# Project Health Report\n\nThis report would be generated by the Project Intelligence system."
    
    def generate_goals_report(self) -> str:
        """Generate goals and progress report"""
        # This would integrate with your Goal System
        return "# Goals and Progress Report\n\nThis report would be generated by the Goal System."
    
    def save_report(self, content: str, report_type: str, filename: str = None) -> str:
        """Save a report to the reports directory"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"{report_type}_{timestamp}.md"
        
        filepath = self.reports_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        console.print(f"[green]✅ Report saved: {filepath}[/green]")
        return str(filepath)

class StatusReporter:
    """Report on various system statuses"""
    
    def __init__(self, project_path: str = "./"):
        self.project_path = Path(project_path).resolve()
    
    def check_serverless_status(self) -> Dict[str, Any]:
        """Check PeteOllama serverless status (from whatsWorking.py)"""
        status = {
            "timestamp": datetime.now().isoformat(),
            "architecture": "RunPod Serverless",
            "version": "2.0.0-serverless",
            "branch": "serverless-handler-refactor"
        }
        
        # Check environment
        env_status = self._check_environment()
        status["environment"] = env_status
        
        # Check files
        file_status = self._check_files()
        status["files"] = file_status
        
        # Check dependencies
        dep_status = self._check_dependencies()
        status["dependencies"] = dep_status
        
        # Calculate overall status
        all_ready = (
            env_status["status"].startswith("✅") and
            file_status["status"].startswith("✅") and
            dep_status["status"].startswith("✅")
        )
        
        status["overall"] = f"✅ Ready" if all_ready else f"⚠️ Issues found"
        status["ready_for_deployment"] = all_ready
        
        return status
    
    def _check_environment(self) -> Dict[str, Any]:
        """Check environment configuration"""
        env_status = {}
        
        # Check required environment variables
        required_vars = [
            "RUNPOD_API_KEY",
            "RUNPOD_SERVERLESS_ENDPOINT"
        ]
        
        for var in required_vars:
            value = os.getenv(var)
            env_status[var] = {
                "set": bool(value),
                "value_preview": f"{value[:8]}..." if value else None
            }
        
        # Check .env file
        env_file_path = self.project_path / ".env"
        env_status["env_file_exists"] = env_file_path.exists()
        
        return {
            "status": "✅ Ready" if all(v["set"] for v in env_status.values() if isinstance(v, dict)) else "❌ Missing vars",
            "details": env_status
        }
    
    def _check_files(self) -> Dict[str, Any]:
        """Check that all required files exist"""
        required_files = [
            "runpod_handler.py",
            "api_server.py", 
            "requirements.serverless.minimal.txt",
            "tests/test_runpod_handler.py"
        ]
        
        file_status = {}
        for file_path in required_files:
            full_path = self.project_path / file_path
            file_status[file_path] = {
                "exists": full_path.exists(),
                "size": full_path.stat().st_size if full_path.exists() else 0,
                "modified": full_path.stat().st_mtime if full_path.exists() else None
            }
        
        all_exist = all(status["exists"] for status in file_status.values())
        
        return {
            "status": "✅ All files present" if all_exist else "❌ Missing files",
            "details": file_status
        }
    
    def _check_dependencies(self) -> Dict[str, Any]:
        """Check dependency installation"""
        requirements_file = self.project_path / "requirements.serverless.minimal.txt"
        
        if not requirements_file.exists():
            return {
                "status": "❌ Requirements file missing",
                "details": {"file": str(requirements_file)}
            }
        
        # Read requirements
        with open(requirements_file) as f:
            lines = f.readlines()
        
        packages = []
        for line in lines:
            line = line.strip()
            if line and not line.startswith('#'):
                packages.append(line.split('>=')[0])
        
        # Check if packages are importable
        import importlib
        import_status = {}
        
        package_map = {
            'fastapi': 'fastapi',
            'uvicorn': 'uvicorn', 
            'pydantic': 'pydantic',
            'requests': 'requests',
            'httpx': 'httpx',
            'python-dotenv': 'dotenv',
            'pytest': 'pytest',
            'pytest-asyncio': 'pytest_asyncio'
        }
        
        for package in packages:
            import_name = package_map.get(package, package)
            try:
                importlib.import_module(import_name)
                import_status[package] = "✅ Installed"
            except ImportError:
                import_status[package] = "❌ Missing"
        
        all_installed = all("✅" in status for status in import_status.values())
        
        return {
            "status": "✅ Dependencies ready" if all_installed else "❌ Missing dependencies", 
            "details": {
                "total_packages": len(packages),
                "import_status": import_status
            }
        }
    
    def check_twilio_status(self) -> Dict[str, Any]:
        """Check Twilio CLI status (from whatsWorking_2.py)"""
        # This would check Twilio CLI functionality
        return {
            "timestamp": datetime.now().isoformat(),
            "service": "Twilio CLI",
            "status": "⚠️ Not implemented",
            "details": "Twilio CLI status checking not yet implemented"
        }
    
    def display_status_table(self, status_data: Dict[str, Any]) -> None:
        """Display status in a nice table format"""
        table = Table(title="System Status Report")
        table.add_column("Component", style="cyan")
        table.add_column("Status", style="bold")
        table.add_column("Details", style="white")
        
        for component, data in status_data.items():
            if isinstance(data, dict) and "status" in data:
                status = data["status"]
                details = str(data.get("details", ""))[:50]
                if len(details) > 50:
                    details = details[:47] + "..."
                
                table.add_row(component, status, details)
        
        console.print(table)
    
    def generate_status_report(self) -> str:
        """Generate a comprehensive status report"""
        serverless_status = self.check_serverless_status()
        twilio_status = self.check_twilio_status()
        
        report_lines = [
            "# System Status Report",
            f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "## Serverless Status",
            f"Overall: {serverless_status['overall']}",
            f"Ready for deployment: {'Yes' if serverless_status['ready_for_deployment'] else 'No'}",
            "",
            "### Environment",
            f"Status: {serverless_status['environment']['status']}",
            "",
            "### Files", 
            f"Status: {serverless_status['files']['status']}",
            "",
            "### Dependencies",
            f"Status: {serverless_status['dependencies']['status']}",
            "",
            "## Twilio CLI Status",
            f"Status: {twilio_status['status']}",
            "",
            "---",
            "Report generated by WhatsWorking Status Reporter"
        ]
        
        return '\n'.join(report_lines)
